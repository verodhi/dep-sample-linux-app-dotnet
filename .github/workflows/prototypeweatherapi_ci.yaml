name: _prototypeweatherapi_ci

# Trigger on pull request to push feature, push main and pull request main
on:
  push:
    branches:
      - main

# Set environment variables with anything needed by the pipeline

jobs:

  # For Pull Request
  runt_test:
    name: "Run application unit test."
    runs-on: custom-runner
    if: github.event_name == 'pull_request'
    env:
      ACTIONS_STEP_DEBUG: true

    steps:

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Loading variables needs improvement
      # It should iterate thorugh the list in json and set the environment variables.
      - name: Load variables from parameters.json
        id: load_json
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          echo "Loading variables from parameters.json"
          APPLICATION_NAME=$(jq -r '.APPLICATION_NAME' parameters.json)
          echo "APPLICATION_NAME=$APPLICATION_NAME" >> $GITHUB_ENV

          APPLICATION_NAME_LOWER=$(jq -r '.APPLICATION_NAME' parameters.json)
          echo "APPLICATION_NAME_LOWER=${APPLICATION_NAME_LOWER,,}" >> $GITHUB_ENV

          PROJECT_NAME=$(jq -r '.PROJECT_NAME' parameters.json)
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

          BUILD_IMAGE=$(jq -r '.BUILD_IMAGE' parameters.json)
          echo "BUILD_IMAGE=$BUILD_IMAGE" >> $GITHUB_ENV

          RUNTIME_IMAGE=$(jq -r '.RUNTIME_IMAGE' parameters.json)
          echo "RUNTIME_IMAGE=$RUNTIME_IMAGE" >> $GITHUB_ENV

          SOURCE_ACR=$(jq -r '.SOURCE_ACR' parameters.json)
          echo "SOURCE_ACR=$SOURCE_ACR" >> $GITHUB_ENV

          BASE_ACR=$(jq -r '.BASE_ACR' parameters.json)
          echo "BASE_ACR=$BASE_ACR" >> $GITHUB_ENV

          DEV_ACR=$(jq -r '.DEV_ACR' parameters.json)
          echo "DEV_ACR=$DEV_ACR" >> $GITHUB_ENV

          NON_PROD_ACR=$(jq -r '.NON_PROD_ACR' parameters.json)
          echo "NON_PROD_ACR=$NON_PROD_ACR" >> $GITHUB_ENV

      - name: Execute dotnet restore
        id: restore
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet restore

      - name: Execute dotnet build
        id: build
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet build

      - name: Execute dotnet test
        id: test
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet test

      # TODO: We need to push the test result after tests are added to project.
      # If this is a PR post the changes
      - name: Push Test report to PR
        id: push_test_report
        uses: actions/github-script@v6
        env:
          TEST_SUMMARY: ${{ join(steps.test.outputs.*, '\n') }}
          APPLICATION_NAME: ${{ env.APPLICATION_NAME }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${{ env.APPLICATION_NAME }} test report.`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

      # Fetch all the tags, required to read tags below.
      - name: Fetch tags
        run: git fetch --tags

      # Login to Azure Subscription.
      - name: Login to Azure.
        uses: azure/login@v1
        with:
          creds: ${{ env.WK_TAA_DEVELOPER_PLATFORM_AZURE_CONNECTION }}

      # Login to ACR's
      - name: Login to required ACR's
        run: |
          az acr login --name "$BASE_ACR"
          az acr login --name "$DEV_ACR"
        env:
          BASE_ACR: ${{ env.BASE_ACR }}
          DEV_ACR: ${{ env.DEV_ACR }}

      # Set image version
      - name: Set the image version
        id: get_version
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) | cut -c2-)
          echo "IMAGE_VERSION=$TAG-${{ env.BRANCH_REF }}-${{ env.COMMIT_ID }}" >> $GITHUB_ENV
        env:
          BRANCH_REF: ${{ github.ref == 'refs/heads/development' && 'd' || 'f' }}
          COMMIT_ID: $(echo ${{ github.sha }} | cut -c 1-5)

      - name: Execute dotnet build
        id: publish
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet publish --configuration Release --output ./publish -v n -p: 'Version='${{ env.IMAGE_VERSION }}
      
      # Build and publish docker image manually because the docker/build-push-action@v4 is not working
      - name: Build and publish docker image
        id: build_publish_image
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          docker build \
          -f Containerfile \
          --tag "${{ env.DEV_ACR }}/${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME_LOWER }}:${{ env.IMAGE_VERSION }}" \
          --build-arg VERSION="${{ env.IMAGE_VERSION }}" \
          --build-arg DLLNAME="${{ env.APPLICATION_NAME }}.dll" \
          --build-arg BUILD_IMAGE="${{ env.BUILD_IMAGE }}" \
          --build-arg RUNTIME_IMAGE="${{ env.RUNTIME_IMAGE }}" \
          --build-arg SOURCE_ACR="${{ env.SOURCE_ACR}}" \
          .  

      # Run Anchor scan on the image created to identify security vulnerabilities.
      - name: Scan the local image with Anchor
        id: anchore_scan
        uses: anchore/scan-action@v3
        with:
          image: "${{ env.DEV_ACR }}/${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME_LOWER }}:${{ env.IMAGE_VERSION }}"
          fail-build: false
          output-format: json
      
      # TODO: We need to push the test result after tests are added to project.
      # If this is a PR post the changes
      - name: Push Scan report to PR
        id: push_scan_report
        uses: actions/github-script@v6
        env:
          ANCHORE_SCAN_SUMMARY: ${{ steps.anchore_scan.outputs.json }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const fileContent = fs.readFileSync(process.env.ANCHORE_SCAN_SUMMARY, 'utf8');
            console.log(fileContent);
            const body = process.env.ANCHORE_SCAN_SUMMARY;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fileContent
            })

  # For release merge to main
  create_push_image:
    name: "Feature and Development branch process"
    if: github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/heads/feature')
    runs-on: custom-runner
    # environment: production
    # needs: [create_release_pr]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
    
      - name: Fetch tags
        run: git fetch --tags

      - name: Load variables from parameters.json
        id: load_json
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          echo "Loading variables from parameters.json"
          APPLICATION_NAME=$(jq -r '.APPLICATION_NAME' parameters.json)
          echo "APPLICATION_NAME=$APPLICATION_NAME" >> $GITHUB_ENV

          APPLICATION_NAME_LOWER=$(jq -r '.APPLICATION_NAME' parameters.json)
          echo "APPLICATION_NAME_LOWER=${APPLICATION_NAME_LOWER,,}" >> $GITHUB_ENV

          PROJECT_NAME=$(jq -r '.PROJECT_NAME' parameters.json)
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

          BUILD_IMAGE=$(jq -r '.BUILD_IMAGE' parameters.json)
          echo "BUILD_IMAGE=$BUILD_IMAGE" >> $GITHUB_ENV

          RUNTIME_IMAGE=$(jq -r '.RUNTIME_IMAGE' parameters.json)
          echo "RUNTIME_IMAGE=$RUNTIME_IMAGE" >> $GITHUB_ENV

          SOURCE_ACR=$(jq -r '.SOURCE_ACR' parameters.json)
          echo "SOURCE_ACR=$SOURCE_ACR" >> $GITHUB_ENV

          BASE_ACR=$(jq -r '.BASE_ACR' parameters.json)
          echo "BASE_ACR=$BASE_ACR" >> $GITHUB_ENV

          DEV_ACR=$(jq -r '.DEV_ACR' parameters.json)
          echo "DEV_ACR=$DEV_ACR" >> $GITHUB_ENV

          NON_PROD_ACR=$(jq -r '.NON_PROD_ACR' parameters.json)
          echo "NON_PROD_ACR=$NON_PROD_ACR" >> $GITHUB_ENV

      # Login to Azure Subscription.
      - name: Login to Azure.
        uses: azure/login@v1
        with:
          creds: ${{ env.WK_TAA_DEVELOPER_PLATFORM_AZURE_CONNECTION }}

      # Login to ACR's
      - name: Login to required ACR's
        run: |
          az acr login --name "$BASE_ACR"
          az acr login --name "$DEV_ACR"
        env:
          BASE_ACR: ${{ env.BASE_ACR }}
          DEV_ACR: ${{ env.DEV_ACR }}

      # Set image version
      - name: Set the image version
        id: get_version
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) | cut -c2-)
          echo "IMAGE_VERSION=$TAG-${{ env.BRANCH_REF }}-${{ env.COMMIT_ID }}" >> $GITHUB_ENV
        env:
          BRANCH_REF: ${{ github.ref == 'refs/heads/development' && 'd' || 'f' }}
          COMMIT_ID: $(echo ${{ github.sha }} | cut -c 1-5)

      - name: Execute dotnet restore
        id: restore
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet restore

      - name: Execute dotnet build
        id: build
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          dotnet publish --configuration Release --output ./publish -v n -p: 'Version='${{ env.IMAGE_VERSION }}
      
      # Build and publish docker image manually because the docker/build-push-action@v4 is not working
      - name: Build and publish docker image
        id: build_publish_image
        working-directory: ${{ env.APPLICATION_DIRECTORY }}
        run: |
          docker build \
          -f Containerfile \
          --tag "${{ env.DEV_ACR }}/${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME_LOWER }}:${{ env.IMAGE_VERSION }}" \
          --build-arg VERSION="${{ env.IMAGE_VERSION }}" \
          --build-arg DLLNAME="${{ env.APPLICATION_NAME }}.dll" \
          --build-arg BUILD_IMAGE="${{ env.BUILD_IMAGE }}" \
          --build-arg RUNTIME_IMAGE="${{ env.RUNTIME_IMAGE }}" \
          --build-arg SOURCE_ACR="${{ env.SOURCE_ACR}}" \
          .
          docker push "${{ env.DEV_ACR }}/${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME_LOWER }}:${{ env.IMAGE_VERSION }}"
